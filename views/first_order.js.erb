/* Using a self-executing anonymous function - (function(){})(); - so that all variables and functions defined within 
arenâ€™t available to the outside world.
 */

(function() {
  (function() {

    /* Load Script function we may need to load jQuery from the Google's CDN */
    /* That code is world-reknown. */
    /* One source: http://snipplr.com/view/18756/loadscript/ */
    var loadProxy, loadScript, loadLib, myAppJavaScript, trackProductScreen, loadProductUrl, productUrl, injectStyles, addStyles, enabled, shouldIRetry;

    loadScript = function(url, callback) {
      var script;
      script = document.createElement('script');
      script.type = 'text/javascript';
      if (script.readyState) {
        script.onreadystatechange = function() {
          if (script.readyState === 'loaded' || script.readyState === 'complete') {
            script.onreadystatechange = null;
            callback();
          }
        };
      } else {
        script.onload = function() {
          callback();
        };
      }
      script.src = url;
      document.getElementsByTagName('head')[0].appendChild(script);
    };

    // This will load our proxy which will load customer attributes.
    loadProxy = function($) {
      
        console.log("loading proxy");
        // $('body').append("<div id='proxy'> </div>").hide().load('/apps/test');
        $('body').append("<div id='proxy' display='none'> </div>")
        $('#proxy').load('/apps/test').hide();
    };

    loadLib = function($) {
      /*!
     * screentime - Measure how much time things spend on-screen http://screentime.parsnip.io/
     * https://github.com/robflaherty/screentime
     * Copyright (c) Rob Flaherty
     * Licensed under the MIT  licenses.
     *
     */

      var defaults;
      defaults = {
        fields: [],
        percentOnScreen: '50%',
        reportInterval: 10,
        googleAnalytics: false,
        callback: function() {}
      };

      $.screentime = function(options) {
        var Field, Viewport, cache, checkViewport, classicGA, counter, init, log, reporter, looker, onScreen, random, report, sendGAEvent, startTimers, started, stopTimers, universalGA;
        random = function() {
          return Math.round(Math.random() * 2147483647);
      };

      /*
       * Constructors
       */
      Field = function(elem) {
        var $elem;
        this.selector = elem.selector;
        $elem = this.$elem = $(elem.selector);
        this.name = elem.name;
        this.top = $elem.offset().top;
        this.height = $elem.height();
        this.bottom = this.top + this.height;
        this.width = $elem.width();
      };
      Viewport = function() {
        var $window;
        $window = $(window);
        this.top = $window.scrollTop();
        this.height = $window.height();
        this.bottom = this.top + this.height;
        this.width = $window.width();
      };


      /*
       * Do Stuff
       */
      sendGAEvent = function(field, time) {
        if (universalGA) {
          ga('send', 'event', 'Screentime', 'Time on Screen', field, parseInt(time, 10), {
            'nonInteraction': true
          });
        }
        if (classicGA) {
          _gaq.push(['_trackEvent', 'Screentime', 'Time on Screen', field, parseInt(time, 10), true]);
        }
      };
      onScreen = function(viewport, field) {
        var buffered, cond, partialView;
        cond = void 0;
        buffered = void 0;
        partialView = void 0;
        if (field.bottom <= viewport.bottom && field.top >= viewport.top) {
          return true;
        }
        if (field.height > viewport.height) {
          cond = viewport.bottom - field.top > viewport.height / 2 && field.bottom - viewport.top > viewport.height / 2;
          if (cond) {
            return true;
          }
        }
        buffered = field.height * options.percentOnScreen / 100;
        partialView = viewport.bottom - buffered >= field.top && field.bottom - buffered > viewport.top;
        return partialView;
      };
      checkViewport = function() {
        var viewport;
        viewport = new Viewport;
        $.each(cache, function(key, val) {
          if (onScreen(viewport, val)) {
            log[key] += 1;
            counter[key] += 1;
          }
        });
      };
      report = function() {
        var data;
        data = {};
        $.each(counter, function(key, val) {
          if (val > 0) {
            data[key] = val;
            counter[key] = 0;
            if (options.googleAnalytics) {
              sendGAEvent(key, val);
            }
          }
        });
        if (!$.isEmptyObject(data)) {
          options.callback.call(this, data, log);
        }
      };
      startTimers = function() {
        // console.log("starting timer");
        var looker, reporter, started;
        if (!started) {
          checkViewport();
          started = true;
        }
        looker = setInterval((function() {
          checkViewport();
        }), 1000);
        reporter = setInterval((function() {
          report();
        }), options.reportInterval * 1000);
      };
      stopTimers = function() {
        // console.log("stopping timer");
        clearInterval(looker);
        clearInterval(reporter);
      };

      init = function() {
        $.each(options.fields, function(index, elem) {
          var field;
          if ($(elem.selector).length) {
            field = new Field(elem);
            cache[field.name] = field;
            counter[field.name] = 0;
            log[field.name] = 0;
          }
        });
        startTimers();
        visibly.onHidden(function() {
          // console.log("onHidden");
          stopTimers();
        });
        visibly.onVisible(function() {
          // console.log("onVisible");
          stopTimers();
          startTimers();
        });
      };
      options = $.extend({}, defaults, options);
      options.percentOnScreen = parseInt(options.percentOnScreen.replace('%', ''), 10);
      counter = {};
      cache = {};
      log = {};
      looker = null;
      reporter = null;
      started = false;
      universalGA = void 0;
      classicGA = void 0;
      if (!options.fields.length) {
        return;
      }
      if (options.googleAnalytics) {
        if (typeof ga === 'function') {
          universalGA = true;
        }
        if (typeof _gaq !== 'undefined' && typeof _gaq.push === 'function') {
          classicGA = true;
        }
      }

      /*
       * Utilities
       */

      /*!
       * visibly - v0.6 Aug 2011 - Page Visibility API Polyfill
       * http://github.com/addyosmani
       * Copyright (c) 2011 Addy Osmani
       * Dual licensed under the MIT and GPL licenses.
       *
       * Methods supported:
       * visibly.onVisible(callback)
       * visibly.onHidden(callback)
       * visibly.hidden()
       * visibly.visibilityState()
       * visibly.visibilitychange(callback(state));
       */
      (function() {
        window.visibly = {
          q: document,
          p: void 0,
          prefixes: ['webkit', 'ms', 'o', 'moz', 'khtml'],
          props: ['VisibilityState', 'visibilitychange', 'Hidden'],
          m: ['focus', 'blur'],
          visibleCallbacks: [],
          hiddenCallbacks: [],
          genericCallbacks: [],
          _callbacks: [],
          cachedPrefix: '',
          fn: null,
          onVisible: function(i) {
            if (typeof i === 'function') {
              this.visibleCallbacks.push(i);
            }
          },
          onHidden: function(i) {
            if (typeof i === 'function') {
              this.hiddenCallbacks.push(i);
            }
          },
          getPrefix: function() {
            var b, i;
            if (!this.cachedPrefix) {
              i = 0;
              while (b = this.prefixes[i++]) {
                if (b + this.props[2] in this.q) {
                  this.cachedPrefix = b;
                  return this.cachedPrefix;
                }
              }
            }
          },
          visibilityState: function() {
            return this._getProp(0);
          },
          hidden: function() {
            return this._getProp(2);
          },
          visibilitychange: function(i) {
            var t;
            if (typeof i === 'function') {
              this.genericCallbacks.push(i);
            }
            t = this.genericCallbacks.length;
            if (t) {
              if (this.cachedPrefix) {
                while (t--) {
                  this.genericCallbacks[t].call(this, this.visibilityState());
                }
              } else {
                while (t--) {
                  this.genericCallbacks[t].call(this, arguments[0]);
                }
              }
            }
          },
          isSupported: function(i) {
            return this.cachedPrefix + this.props[2] in this.q;
          },
          _getProp: function(i) {
            return this.q[this.cachedPrefix + this.props[i]];
          },
          _execute: function(i) {
            var t;
            if (i) {
              this._callbacks = i === 1 ? this.visibleCallbacks : this.hiddenCallbacks;
              t = this._callbacks.length;
              while (t--) {
                this._callbacks[t]();
              }
            }
          },
          _visible: function() {
            window.visibly._execute(1);
            window.visibly.visibilitychange.call(window.visibly, 'visible');
          },
          _hidden: function() {
            window.visibly._execute(2);
            window.visibly.visibilitychange.call(window.visibly, 'hidden');
          },
          _nativeSwitch: function() {
            this[this._getProp(2) ? '_hidden' : '_visible']();
          },
          _listen: function() {
            var i;
            try {
              if (!this.isSupported()) {
                if (this.q.addEventListener) {
                  window.addEventListener(this.m[0], this._visible, 1);
                  window.addEventListener(this.m[1], this._hidden, 1);
                } else {
                  if (this.q.attachEvent) {
                    this.q.attachEvent('onfocusin', this._visible);
                    this.q.attachEvent('onfocusout', this._hidden);
                  }
                }
              } else {
                this.q.addEventListener(this.cachedPrefix + this.props[1], (function() {
                  window.visibly._nativeSwitch.apply(window.visibly, arguments);
                }), 1);
              }
            } catch (error) {
              i = error;
            }
          },
          init: function() {
            this.getPrefix();
            this._listen();
          }
        };
        this.visibly.init();
      })();

      $.screentime.reset = function() {
          stopTimers();
          $.each(cache, function(key, val) {
            log[key] = 0;
            counter[key] = 0;
          });
          startTimers();
        };
        init();
      };

      /*!
       * PeekABar - jQuery plugin for a Notification Bar. 
       * https://github.com/kunalnagar/jquery.peekABar
       * Copyright (c) 2015 Kunal Nagar and other contributors
       * Licensed under the MIT  licenses.
       *
       */
      $.peekABar = function(options) {

        var that = this,
          rand = parseInt(Math.random() * 100000000, 0);

        /** Instance */
        this.bar = {};

        /** Settings */
        this.settings = {};

        /** Defaults */
        var defaults = {
          html: 'Your Message Here',
          delay: 3000,
          autohide: false,
          padding: '1em',
          backgroundColor: 'rgb(195, 195, 195)',
          animation: {
            type: 'slide',
            duration: 'slow'
          },
          cssClass: null,
          opacity: '1',
          position: 'top',

          onShow: function() {},
          onHide: function() {},

          closeOnClick: false
        };

        /** Initialise the plugin */
        var init = function() {
          that.settings = $.extend({}, defaults, options);
          _create();
          _applyCustomSettings();
        };

        /** Show the Bar */
        this.show = function(args) {
          if(args !== undefined) {
            if(args.html) {
              this.bar.html(args.html);
            }
          }
          switch (this.settings.animation.type) {
            case 'slide':
              this.bar.slideDown(that.settings.animation.duration);
              break;
            case 'fade':
              this.bar.fadeIn(that.settings.animation.duration);
              break;
          }
          if(this.settings.autohide) {
            setTimeout(function () {
              that.hide();
            }, this.settings.delay);
          }
          this.settings.onShow.call(this, args);
        };

        /** Hide the Bar */
        this.hide = function() {
          switch (this.settings.animation.type) {
            case 'slide':
              this.bar.slideUp(that.settings.animation.duration);
              break;
            case 'fade':
              this.bar.fadeOut(that.settings.animation.duration);
              break;
          }
          this.settings.onHide.call(this);
        };

        /** Create the Bar */
        var _create = function() {
          that.bar = $('<div></div>').addClass('peek-a-bar').attr('id', '__peek_a_bar_' + rand);
          $('html').append(that.bar);
          that.bar.hide();
        };

        /** Apply Custom Bar Settings */
        var _applyCustomSettings = function() {
          _applyStyleSheet();
          _applyHTML();
          _applyAutohide();
          _applyPadding();
          _applyBackgroundColor();
          _applyOpacity();
          _applyCSSClass();
          _applyPosition();
          _applyCloseOnClick();
        };

        /** Apply Stylesheet */
        /** Added the styling from stylesheet - jquery.peekabar.css by Yeo Eng Guan */
        var _applyStyleSheet = function() {
          that.bar.css('margin', '0');
          that.bar.css('position', 'fixed');
          that.bar.css('width', '100%');
          that.bar.css('left', '0');
          that.bar.css('right', '0');
          that.bar.css('text-align', 'center');
        };

        /** Set Custom Bar HTML */
        var _applyHTML = function() {
          that.bar.html(that.settings.html);
        };

        /** Autohide the Bar */
        var _applyAutohide = function() {
          if(that.settings.autohide) {
            setTimeout(function () {
              that.hide();
            }, that.settings.delay);
          }
        };

        /** Apply Padding */
        var _applyPadding = function() {
          that.bar.css('padding', that.settings.padding);
        };

        /** Apply Background Color */
        var _applyBackgroundColor = function() {
          that.bar.css('background-color', that.settings.backgroundColor);
        };

        /** Apply Custom CSS Class */
        var _applyCSSClass = function() {
          if(that.settings.cssClass !== null) {
            that.bar.addClass(that.settings.cssClass);
          }
        };

        /** Apply Opacity */
        var _applyOpacity = function() {
          that.bar.css('opacity', that.settings.opacity);
        };

        /** Apply Position where the Bar should be shown */
        var _applyPosition = function() {
          switch(that.settings.position) {
            case 'top':
              that.bar.css('top', 0);
              break;
            case 'bottom':
              that.bar.css('bottom', 0);
              break;
            default:
              that.bar.css('top', 0);
          }
        };

        /** Close the bar on click */
        var _applyCloseOnClick = function() {
          if(that.settings.closeOnClick) {
            that.bar.click(function() {
              that.hide();
            });
          }
        };

        init();

        return this;
      };
    }; // end of loadLib

    getUrlParameter = function(name) {
        name = name.replace(/[\[]/, '\\[').replace(/[\]]/, '\\]');
        var regex = new RegExp('[\\?&]' + name + '=([^&#]*)');
        var results = regex.exec(location.search);
        return results === null ? '' : decodeURIComponent(results[1].replace(/\+/g, ' '));
    };

    loadProductUrl = function($) {
      shouldIRetry = false;
      var form = this.$("form[action='/cart/add']");
      var variant_id = this.$('input[name^=id]:checked, select[name^=id], input[name=id], hidden[name^=id]', form).val();
      if (typeof variant_id == 'undefined') {
        enabled = false;
      } else if (variant_id == null) {
        var option_1 = this.$('option[value]', form).val();
        if (typeof option_1 != 'undefined') {
          enabled = false;
        } else {
          enabled = true;
          shouldIRetry = true;
          productUrl = "/cart/" +  option_1 + ":1";
        }
      } else {
        enabled = true
        productUrl = "/cart/" +  variant_id + ":1";
      }
    }; // end of loadProductUrl

    injectStyles = function($, rule) {
       var div = $("<div />", {
        html: '&shy;<style>' + rule + '</style>'
      }).appendTo("body");
    };

    addStyles = function($) {
      
      var bar_style = ".bizzbar{  background:<%= @setting.bar_color %>;  color:<%= @setting.text_color %>;  z-index:1000;  font-family:<%= @setting.text_font_family %>;  font-size:<%= @setting.text_font_size %>; border-bottom:3px solid rgb(255,255,255); box-shadow:0 1px 5px rgba(0,0,0,.7)}";
      var button_style = ".bizzbar .bizztext .bizzbutton{-webkit-box-shadow:rgba(0,0,0,0.278431) 1px 1px 3px; background:<%= @setting.button_color %>;  border-bottom-left-radius:4px;  border-bottom-right-radius:4px;  border-top-left-radius:4px;  border-top-right-radius:4px;  border:none;  box-shadow:rgba(0,0,0,0.278431) 1px 1px 3px;  color:<%= @setting.button_text_color %>;  cursor:pointer;  font-size:0.854em;  margin:0px 0px 0px 7px;  outline:none;  padding:2px 10px 1px;  position:relative;  text-decoration:initial}";

      console.log(bar_style);
      console.log(button_style);

      injectStyles($, bar_style);
      injectStyles($, button_style);
      
      injectStyles($, '.bizzbar .bizztext .bizzbutton a{  color:<%= @setting.button_text_color %>;}');
      injectStyles($, '.bizzbar .bizztext .bizzbutton:hover{  cursor:pointer;background:<%= @setting.button_hover_color%>}');
      injectStyles($, '.bizzbar .bizzbutton a:active{  top:1px}');

    };

    // replace with our application code
    trackProductScreen = function($) {

      var bar = $.peekABar({
        html: 'Custom Message',
        delay: 2000,
        autohide: false,
        padding: '1em',
        backgroundColor: <%= @setting.bar_color %>,
        animation: {
            type: 'fade',
            duration: '2000'
        },
        opacity: '0.9',
        cssClass: 'bizzbar',
        position: 'bottom',
        closeOnClick: true,
        onShow: function() {
            // console.log('called after bar is shown');
        },
        onHide: function() {
            // console.log('called after bar is hidden');
        }
      });

      var elem = $("meta[itemprop='image']").parent();
      var total = 0;
      // hard coded targeted_time
      var targeted_time = <%= @setting.targeted_time %>;
      addStyles($);

      $.screentime({
      fields: [
        { selector: elem,
          name: 'Middle'
        }
      ],
      reportInterval: 1,
      callback: function(data) {
          console.log("hahaha");
          $.each(data, function(key, val) {
            total = total + val;
          });
          
          if (total >= targeted_time) {
            // if place_first_order cookie is present
            // if true, dun display
            var first_order_cookie_name = "<%=@shop_name%>" +"_placed_first_order";
            var first_order_cookie = localStorage.getItem(first_order_cookie_name);
            if ((first_order_cookie) && (first_order_cookie == 'true')) {
              console.log("not displaying ...." + first_order_cookie);
              return;
            }
            if (shouldIRetry) {
              // if it is not enabled, try again.  If it fail, return
              loadProductUrl();
              if (!enabled) {
                console.log("Tried re-enabling.  Could not get productUrl.")
                return;
              }
            }

            // Need to check whether we need to reload the productUrl
            // otherwise, display
            console.log("Display " + productUrl);

            var first_order_signedin_cookie_name = "<%=@shop_name%>" +"_signed_in";
            var first_order_signedin_cookie = sessionStorage.getItem(first_order_signedin_cookie_name);
            var first_name = null;
            if ((first_order_signedin_cookie) && (first_order_signedin_cookie == 'true')) {
              // customer signed in
              var c_name_cookie = "<%=@shop_name%>" +"_customer_name";
              first_name = localStorage.getItem(c_name_cookie);
              console.log("customer signed in ");
            }
            console.log("name of the customer: " + first_name);
            var final_html;
            var html_1 = "<p class='bizztext'> <%= @setting.bar_text %> <button class='bizzbutton'><a href=";
            var html_2 = "><%= @setting.button_text %></a></button></p>"
            // hard code for the time being
            var discount_html = "?discount=<%= @setting.discount_code %>";
            final_html = html_1 + "https://" +window.location.hostname + productUrl + discount_html + html_2;
            // console.log("final html "+ final_html);
            bar.show({
                html: final_html
            });
          }
        } // end of callback
      });
    };

    /* This is my app's JavaScript */
    myAppJavaScript = function($) {
      // console.log('Success');
      // loadStylesheet("/peekabar/jquery.peekabar.css");
      loadProductUrl($);
      if (!enabled) {
        console.log("First Order is not enabled")
        return;
      }
      loadLib($);
      loadProxy($);
      trackProductScreen($);
    };

    /* If jQuery has not yet been loaded or if it has but it's too old for our needs,
    we will load jQuery from the Google CDN, and when it's fully loaded, we will run
    our app's JavaScript. Set your own limits here, the sample's code below uses 1.9.1
    as the minimum version we are ready to use, and if the jQuery is older, we load 1.9.1
     */
    if (typeof jQuery === 'undefined' || parseInt(jQuery.fn.jquery) === 1 && parseFloat(jQuery.fn.jquery.replace(/^1\./, '')) < 9.1) {
      loadScript('//ajax.googleapis.com/ajax/libs/jquery/1.9.1/jquery.min.js', function() {
        var jQuery191;
        jQuery191 = jQuery.noConflict(true);
        myAppJavaScript(jQuery191);
      });
    } else {
      myAppJavaScript(jQuery);
    }
  })();

}).call(this);
